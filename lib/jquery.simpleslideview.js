// Generated by CoffeeScript 1.6.2
(function() {
  var $, $window, SimpleSlideView, backfaceVisibility, defaults, event, eventPrefix, prefix, resetStyles, testEl, transform, transition, transitionEnd, vendor, vendors,
    __slice = [].slice;

  $ = jQuery;

  $window = $(window);

  defaults = {
    views: '> div',
    activeView: null,
    cssSupport: (typeof Modernizr !== "undefined" && Modernizr !== null) && Modernizr.csstransforms && Modernizr.csstransitions,
    duration: $.fx.speeds._default,
    jsEasing: 'swing',
    cssEasing: 'ease-out',
    dataAttrEvent: 'click',
    dataAttr: {
      push: 'pushview',
      pop: 'popview'
    },
    eventNames: {
      viewChangeStart: 'viewChangeStart',
      viewChangeEnd: 'viewChangeEnd'
    }
  };

  prefix = '';

  vendors = {
    Webkit: 'webkit',
    Moz: '',
    O: 'o',
    ms: 'MS'
  };

  testEl = document.createElement('div');

  for (vendor in vendors) {
    event = vendors[vendor];
    if (!(testEl.style[vendor + 'TransitionProperty'] != null)) {
      continue;
    }
    prefix = '-' + vendor.toLowerCase() + '-';
    eventPrefix = event;
    break;
  }

  transform = prefix + 'transform';

  transition = prefix + 'transition';

  backfaceVisibility = prefix + 'backface-visibility';

  transitionEnd = eventPrefix != null ? eventPrefix + 'TransitionEnd' : 'transitionend';

  resetStyles = function(el, styles) {
    var $el, reset, style, _i, _len;

    $el = $(el);
    reset = {};
    for (_i = 0, _len = styles.length; _i < _len; _i++) {
      style = styles[_i];
      reset[style] = '';
    }
    return $el.css(reset);
  };

  SimpleSlideView = (function() {
    function SimpleSlideView(element, options) {
      this.element = element;
      this.options = $.extend(true, {}, defaults, options);
      this.$container = $(this.element);
      this.$views = this.$container.find(this.options.views);
      this.$activeView = this.options.activeView != null ? this.options.activeView : this.$views.first();
      this.animate = this.options.cssSupport ? this.animateCSS : this.animateJS;
    }

    SimpleSlideView.prototype.on = function() {
      var _this = this;

      this.$views.not(this.$activeView).hide();
      if (this.options.dataAttrEvent != null) {
        this.$container.on(this.options.dataAttrEvent, '[data-' + this.options.dataAttr.push + ']', function(event) {
          event.preventDefault();
          return _this.pushView($(event.target).data(_this.options.dataAttr.push));
        });
        return this.$container.on(this.options.dataAttrEvent, '[data-' + this.options.dataAttr.pop + ']', function(event) {
          event.preventDefault();
          return _this.popView($(event.target).data(_this.options.dataAttr.pop));
        });
      }
    };

    SimpleSlideView.prototype.off = function() {
      this.$views.show();
      if (this.options.dataAttrEvent != null) {
        this.$container.off(this.options.dataAttrEvent, '[data-' + this.options.dataAttr.push + ']');
        return this.$container.off(this.options.dataAttrEvent, '[data-' + this.options.dataAttr.pop + ']');
      }
    };

    SimpleSlideView.prototype.slideView = function(targetView, push) {
      var $targetView, containerWidth;

      this.$container.trigger(this.options.eventNames.viewChangeStart);
      $targetView = $(targetView);
      containerWidth = this.$container.outerWidth();
      this.$container.css({
        height: this.$container.outerHeight(),
        overflow: 'hidden',
        position: 'relative',
        width: '100%'
      });
      return this.animate($targetView, push, containerWidth);
    };

    SimpleSlideView.prototype.animateJS = function($targetView, push, containerWidth) {
      var baseCSS,
        _this = this;

      baseCSS = {
        position: 'absolute',
        top: 0,
        width: containerWidth
      };
      this.$activeView.css($.extend({}, baseCSS, {
        left: 0
      }));
      this.$activeView.animate({
        left: push ? containerWidth * -1 : containerWidth
      }, this.options.duration, this.options.jsEasing, function() {
        return resetStyles(this, ['left', 'position', 'top', 'width']).hide();
      });
      $targetView.show().css($.extend({}, baseCSS, {
        left: push ? containerWidth : containerWidth * -1
      }));
      $targetView.animate({
        left: 0
      }, this.options.duration, this.options.jsEasing, function() {
        return resetStyles(this, ['left', 'position', 'top', 'width']);
      });
      this.$container.animate({
        height: $targetView.outerHeight()
      }, function() {
        resetStyles(_this.$container, ['height', 'overflow', 'position', 'width']);
        return _this.$container.trigger(_this.options.eventNames.viewChangeEnd);
      });
      return this.$activeView = $targetView;
    };

    SimpleSlideView.prototype.animateCSS = function($targetView, push, containerWidth) {
      var baseCSS, distance,
        _this = this;

      distance = push ? containerWidth * -1 : containerWidth;
      this.$container.css(backfaceVisibility, 'hidden');
      baseCSS = {
        position: 'absolute',
        top: 0,
        width: '100%'
      };
      baseCSS[backfaceVisibility] = 'hidden';
      baseCSS[transition] = transform + ' ' + this.options.duration + 'ms ' + this.options.cssEasing;
      $window.on(transitionEnd, function(event) {
        if (event.target === $targetView[0]) {
          resetStyles(_this.$activeView.add($targetView), ['display', 'position', 'top', 'width', backfaceVisibility, transition, transform]);
          _this.$activeView.hide();
          _this.$activeView = $targetView;
          _this.$container.css(transition, 'height ' + (_this.options.duration / 2) + 'ms ' + _this.options.cssEasing);
          return _this.$container.css('height', $targetView.outerHeight());
        } else if (event.target === _this.$container[0]) {
          resetStyles(_this.$container, ['height', 'overflow', 'position', 'width', backfaceVisibility, transition]);
          $window.off(transitionEnd);
          return _this.$container.trigger(_this.options.eventNames.viewChangeEnd);
        } else {

        }
      });
      return $targetView.css(transform, 'translateX(' + (distance * -1) + 'px)').show(0, function() {
        _this.$activeView.add($targetView).css(baseCSS);
        _this.$activeView.css(transform, 'translateX(' + distance + 'px)');
        return $targetView.css(transform, 'translateX(' + 0 + 'px)');
      });
    };

    SimpleSlideView.prototype.pushView = function(targetView) {
      return this.slideView(targetView, true);
    };

    SimpleSlideView.prototype.popView = function(targetView) {
      return this.slideView(targetView);
    };

    return SimpleSlideView;

  })();

  $.fn.simpleSlideView = function() {
    var arg, args, options, _i, _len;

    options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (options == null) {
      options = {};
    }
    if (typeof options !== 'object') {
      options = {
        views: options
      };
    }
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      if (typeof arg === 'object') {
        $.extend(options, arg);
      }
    }
    return new SimpleSlideView(this, options);
  };

}).call(this);
