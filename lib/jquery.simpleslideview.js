// Generated by CoffeeScript 1.6.2
(function() {
  var $, $window, SimpleSlideView, backfaceVisibility, defaults, event, eventPrefix, isZepto, prefix, testEl, transform, transition, transitionEnd, vendor, vendors,
    __slice = [].slice;

  $ = typeof jQuery !== "undefined" && jQuery !== null ? jQuery : Zepto;

  isZepto = (typeof Zepto !== "undefined" && Zepto !== null) && $ === Zepto;

  $window = $(this);

  defaults = {
    views: '> div',
    cssSupport: false,
    activeView: null,
    duration: $.fx.speeds._default,
    easing: null,
    jsEasing: null,
    cssEasing: null,
    dataAttrEvent: 'click',
    dataAttr: {
      push: 'pushview',
      pop: 'popview'
    },
    enableScrollTo: true
  };

  prefix = '';

  vendors = {
    Webkit: 'webkit',
    Moz: '',
    O: 'o',
    ms: 'MS'
  };

  testEl = document.createElement('div');

  for (vendor in vendors) {
    event = vendors[vendor];
    if (!(testEl.style[vendor + 'TransitionProperty'] != null)) {
      continue;
    }
    prefix = '-' + vendor.toLowerCase() + '-';
    eventPrefix = event;
    break;
  }

  transform = prefix + 'transform';

  transition = prefix + 'transition';

  backfaceVisibility = prefix + 'backface-visibility';

  transitionEnd = eventPrefix != null ? eventPrefix + 'TransitionEnd' : 'transitionend';

  SimpleSlideView = (function() {
    function SimpleSlideView(element, options) {
      this.element = element;
      this.options = $.extend(true, {}, defaults, options);
      this.$container = $(this.element);
      this.$views = this.$container.find(this.options.views);
      this.$activeView = this.options.activeView ? this.$container.find(this.options.activeView) : this.$views.first();
      this.$window = $(window);
      this.animate = this.options.cssSupport ? this.animateCSS : this.animateJS;
      if (this.options.cssSupport && this.options.cssEasing) {
        this.options.easing = this.options.cssEasing;
      }
      if (!this.options.cssSupport ? this.options.jsEasing : void 0) {
        this.options.easing = this.options.jsEasing;
      }
      if (!this.options.easing ? this.options.cssSupport : void 0) {
        this.options.easing = 'linear';
      }
    }

    SimpleSlideView.prototype.on = function() {
      var _this = this;

      this.$views.not(this.$activeView).hide();
      if (this.options.dataAttrEvent != null) {
        this.$container.on(this.options.dataAttrEvent, '[data-' + this.options.dataAttr.push + ']', function(event) {
          event.preventDefault();
          return _this.pushView($(event.target).data(_this.options.dataAttr.push));
        });
        return this.$container.on(this.options.dataAttrEvent, '[data-' + this.options.dataAttr.pop + ']', function(event) {
          event.preventDefault();
          return _this.popView($(event.target).data(_this.options.dataAttr.pop));
        });
      }
    };

    SimpleSlideView.prototype.off = function() {
      this.$views.show();
      if (this.options.dataAttrEvent != null) {
        this.$container.off(this.options.dataAttrEvent, '[data-' + this.options.dataAttr.push + ']');
        return this.$container.off(this.options.dataAttrEvent, '[data-' + this.options.dataAttr.pop + ']');
      }
    };

    SimpleSlideView.prototype.slideView = function(targetView, push) {
      var $targetView, containerWidth;

      $targetView = $(targetView);
      containerWidth = this.$container.width();
      this.$container.css({
        height: this.$container.outerHeight(),
        overflow: 'hidden',
        position: 'relative',
        width: '100%'
      });
      return this.animate($targetView, push, containerWidth);
    };

    SimpleSlideView.prototype.scrollToTop = function() {
      var containerTop;

      if (this.options.enableScrollTo && ($.fn.scrollTo != null)) {
        containerTop = this.$container.position().top;
        if ($window.scrollTop() > containerTop) {
          return $.scrollTo(containerTop, this.options.duration);
        }
      }
    };

    SimpleSlideView.prototype.animateJS = function($targetView, push, containerWidth) {
      var baseCSS, resetCSS,
        _this = this;

      resetCSS = {
        left: '',
        position: '',
        top: '',
        width: ''
      };
      baseCSS = $.extend({}, resetCSS, {
        position: 'absolute',
        top: 0,
        width: containerWidth
      });
      this.$activeView.css($.extend({}, baseCSS, {
        left: 0
      }));
      this.$activeView.animate({
        left: push ? containerWidth * -1 : containerWidth
      }, this.options.duration, this.options.easing, function() {
        return $(this).css(resetCSS).hide();
      });
      $targetView.show().css($.extend({}, baseCSS, {
        left: push ? containerWidth : containerWidth * -1
      }));
      $targetView.animate({
        left: 0
      }, this.options.duration, this.options.easing, function() {
        return $(this).css(resetCSS);
      });
      this.$container.animate({
        height: $targetView.outerHeight()
      }, function() {
        return _this.$container.css({
          height: '',
          overflow: '',
          position: '',
          width: ''
        });
      });
      this.scrollToTop();
      return this.$activeView = $targetView;
    };

    SimpleSlideView.prototype.animateCSS = function($targetView, push, containerWidth) {
      var baseCSS, containerResetCSS, distance, inCSS, preCSS, resetCSS,
        _this = this;

      distance = push ? containerWidth * -1 : containerWidth;
      this.$container.css(backfaceVisibility, 'hidden');
      baseCSS = {
        position: 'absolute',
        top: 0,
        width: '100%'
      };
      baseCSS[backfaceVisibility] = 'hidden';
      baseCSS[transition] = transform + ' ' + this.options.duration + 'ms ' + this.options.easing;
      preCSS = {};
      preCSS[transform] = 'translateX(' + (distance * -1) + 'px)';
      inCSS = {};
      inCSS[transform] = 'translateX(' + 0 + 'px)';
      resetCSS = {
        display: '',
        position: '',
        top: '',
        width: ''
      };
      resetCSS[backfaceVisibility] = '';
      resetCSS[transition] = '';
      resetCSS[transform] = '';
      containerResetCSS = {
        height: '',
        overflow: '',
        position: '',
        width: ''
      };
      containerResetCSS[backfaceVisibility] = '';
      containerResetCSS[transition] = '';
      $window.on(transitionEnd, function(event) {
        if (event.target === $targetView[0]) {
          _this.$activeView.add($targetView).css(resetCSS);
          _this.$activeView.hide();
          _this.$activeView = $targetView;
          _this.$container.css(transition, 'height ' + (_this.options.duration / 2) + 'ms ' + _this.options.easing);
          _this.$container.css('height', $targetView.outerHeight());
          return _this.scrollToTop();
        } else if (event.target === _this.$container[0]) {
          _this.$container.css(containerResetCSS);
          return $window.off(transitionEnd);
        } else {

        }
      });
      return $targetView.css(preCSS).show(0, function() {
        _this.$activeView.add($targetView).css(baseCSS);
        _this.$activeView.css(transform, 'translateX(' + distance + 'px)');
        return $targetView.css(transform, 'translateX(' + 0 + 'px)');
      });
    };

    SimpleSlideView.prototype.pushView = function(targetView) {
      return this.slideView(targetView, true);
    };

    SimpleSlideView.prototype.popView = function(targetView) {
      return this.slideView(targetView);
    };

    return SimpleSlideView;

  })();

  $.fn.simpleSlideView = function() {
    var arg, args, options, _i, _len;

    options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (options == null) {
      options = {};
    }
    if (typeof options !== 'object') {
      options = {
        views: options
      };
    }
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      if (typeof arg === 'object') {
        $.extend(options, arg);
      }
    }
    return new SimpleSlideView(this, options);
  };

}).call(this);
